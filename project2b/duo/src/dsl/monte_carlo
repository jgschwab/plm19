#!/usr/bin/env coffee

fs = require 'fs'
configFile = 'config'

read = () ->
    fs.readFileSync configFile, 'utf8'

config = read()
console.log config
fields = []

# -------- SINGLETON CLASS --------
class Generator
  instance = null

  class ActualGenerator
    # Middle square method with Weyl sequence
    # https://en.wikipedia.org/wiki/Middle-square_method#Middle_Square_Weyl_Sequence_PRNG
    # https://pthree.org/2018/07/30/middle-square-weyl-sequence-prng/

    # Initialize the generator with a given seed
    constructor: (seed) ->
        # Define instance parameters
        @params = { x: 0, weyl: 0, seed: seed, result: 0 }

    # Pipe and filter stages. Parameters are passed in an environment object
    multiply = (params) ->
        params.x *= params.x
        params

    add = (params) ->
        params.weyl += params.seed
        params.x += params.weyl
        params

    middle = (params) ->
        params.x = params.x >>> 8 & 0xffff
        params


    normalize = (params) ->
        params.result = params.x / (Math.pow(2, 16))
        params

    # --- Pipe and filter --- #
    random = (params) ->
        normalize middle add multiply params

    generate: (min, max) ->
        # Update instance variable parameters at each iteration
        @params = random @params
        # Return the latest result scaled to fit min and max
        @params.result * (max - min) + min

  @getInstance: (seed) ->
    instance ?= new ActualGenerator(seed)

# ---------------------------------

# -------- STATE MACHINE ----------
class StateMachineReader
    constructor: (@input) ->
        @index = 0
        @state = "name"
        @name = ""
        @min = ""
        @max = ""

    next: ->
        switch @state
            when "name"
                if (@input.charAt @index) is ' '
                    @state = "min"
                else
                    @name += @input.charAt @index
                @index += 1
                return 0
            when "min"
                if (@input.charAt @index) is ' '
                    @state = "max"
                    @min = parseFloat(@min, 10)
                else
                    @min += @input.charAt @index
                @index += 1
                return 0
            when "max"
                if (@input.charAt @index) is '\n'
                    @state = "rowEnd"
                    @max = parseFloat(@max, 10)
                else
                    @max += @input.charAt @index
                @index += 1
                return 0
            when "rowEnd"
                if @index is @input.length
                    @state = "done"
                else
                    @state = "name"
                    fields.push {name: @name, min: @min, max: @max}
                    @name = ""
                    @min = ""
                    @max = ""
                return 0
# ---------------------------------


reader = new StateMachineReader config

reader.next() until reader.state is "done"
#console.log fields

# Default seed for random number
seed = (new Date).getTime() & 0xffff

# Parse arguments -n and -s (number of lines and seed)
i = 0
n = 10
for arg in process.argv
    if arg == "-n"
        n = Number(process.argv[i + 1])
    if arg == "-s"
        seed = Number(process.argv[i + 1])
    i++

# Request the singleton with the given seed.
# If one already exists, the existing one is returned and the seed is ignored.
gen = Generator.getInstance seed


# Print csv headers
for field, i in fields
    process.stdout.write field.name
    (process.stdout.write) ", " if i < fields.length - 1
process.stdout.write "\n"


# Generate random values
for [0...n]
    for field, i in fields
        process.stdout.write String(gen.generate(field.min, field.max))
        (process.stdout.write) ", " if i < fields.length - 1
    process.stdout.write "\n"





