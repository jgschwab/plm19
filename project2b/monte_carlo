#!/usr/bin/env coffee


fs = require 'fs'
configFile = 'config'

read = () ->
    fs.readFileSync configFile, 'utf8'
    
config = read()    
console.log config
fields = []

# -------- SINGLETON CLASS --------
class Singleton

  instance = null
  
  class Generator
    constructor: (param) ->
    @param = random param
    
    @generate: (min, max) -> 
      
    
  @get: () ->
    instance ?= new Generator()
# ---------------------------------

# -------- STATE MACHINE ----------
class StateMachineReader
    constructor: (@input) ->
        @index = 0
        @state = "name"
        @name = ""
        @min = ""
        @max = ""
    
    next: ->
        switch @state
            when "name"
                if (@input.charAt @index) is ' '
                    @state = "min"
                else
                    @name += @input.charAt @index
                @index += 1
                return 0
            when "min"
                if (@input.charAt @index) is ' '
                    @state = "max"
                    @min = parseFloat(@min, 10)
                else
                    @min += @input.charAt @index
                @index += 1
                return 0
            when "max"
                if (@input.charAt @index) is '\n'
                    @state = "rowEnd"
                    @max = parseFloat(@max, 10)
                else
                    @max += @input.charAt @index
                @index += 1
                return 0
            when "rowEnd"
                if @index is @input.length
                    @state = "done"
                else
                    @state = "name"
                    fields.push {name: @name, min: @min, max: @max}
                    @name = ""
                    @min = ""
                    @max = ""
                return 0  
                
# ---------------------------------


reader = new StateMachineReader config

reader.next() until reader.state is "done"
#console.log fields

gen = Singleton.get()

for field, i in fields
    process.stdout.write field.name
    (process.stdout.write) ", " if i < fields.length - 1
process.stdout.write "\n"


num = 10
for [0...num]
    for field, i in fields
        process.stdout.write gen.generate(field.min, field.max)
        (process.stdout.write) ", " if i < fields.length - 1
    process.stdout.write "\n"





# Middle square method with Weyl sequence
# https://en.wikipedia.org/wiki/Middle-square_method#Middle_Square_Weyl_Sequence_PRNG
# https://pthree.org/2018/07/30/middle-square-weyl-sequence-prng/

n = 100
# Default seed is last 4 digits of unix time
seed = Number(String((new Date).getTime()).substr(8))

# Parse arguments -n and -s
i = 0
for arg in process.argv
    if arg == "-n"
        n = Number(process.argv[i + 1])
    if arg == "-s"
        seed = Number(process.argv[i + 1])
    i++


# Pipeline stages for number generation
multiply = (params) ->
    params.x *= params.x
    params

add = (params) ->
    params.weyl += params.seed
    params.x += params.weyl
    params

middle = (params) ->
    params.x = params.x << 32 | params.x >> 32
    params


normalize = (params) ->
    params.result = Number("0." + Math.abs params.x)
    params


# Top level, call all stages of the pipeline
random = (params) ->
    normalize middle add multiply params



# Data object for passing through the pipe
params = { x: 0, weyl: 0, seed: seed, result: 0 }


# Print out n "random" numbers
for _ in [1..n]
    params = random params
    console.log params.result
