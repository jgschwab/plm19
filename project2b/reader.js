// Generated by CoffeeScript 2.4.1
(function() {
  var StateMachineReader, config, configFile, field, fields, fs, gen, i, j, k, l, len, len1, num, read, reader, ref;

  fs = require('fs');

  configFile = 'config';

  read = function() {
    return fs.readFileSync(configFile, 'utf8');
  };

  config = read();

  console.log(config);

  fields = [];

  StateMachineReader = class StateMachineReader {
    constructor(input) {
      this.input = input;
      this.index = 0;
      this.state = "name";
      this.name = "";
      this.min = "";
      this.max = "";
    }

    next() {
      switch (this.state) {
        case "name":
          if ((this.input.charAt(this.index)) === ' ') {
            this.state = "min";
          } else {
            this.name += this.input.charAt(this.index);
          }
          this.index += 1;
          return 0;
        case "min":
          if ((this.input.charAt(this.index)) === ' ') {
            this.state = "max";
            this.min = parseFloat(this.min, 10);
          } else {
            this.min += this.input.charAt(this.index);
          }
          this.index += 1;
          return 0;
        case "max":
          if ((this.input.charAt(this.index)) === '\n') {
            this.state = "rowEnd";
            this.max = parseFloat(this.max, 10);
          } else {
            this.max += this.input.charAt(this.index);
          }
          this.index += 1;
          return 0;
        case "rowEnd":
          if (this.index === this.input.length) {
            this.state = "done";
          } else {
            this.state = "name";
            fields.push({
              name: this.name,
              min: this.min,
              max: this.max
            });
            this.name = "";
            this.min = "";
            this.max = "";
          }
          return 0;
      }
    }

  };

  reader = new StateMachineReader(config);

  while (reader.state !== "done") {
    reader.next();
  }

  //console.log fields
  gen = Singleton.get();

  for (i = j = 0, len = fields.length; j < len; i = ++j) {
    field = fields[i];
    process.stdout.write(field.name);
    if (i < fields.length - 1) {
      process.stdout.write(", ");
    }
  }

  process.stdout.write("\n");

  num = 10;

  for (k = 0, ref = num; (0 <= ref ? k < ref : k > ref); 0 <= ref ? k++ : k--) {
    for (i = l = 0, len1 = fields.length; l < len1; i = ++l) {
      field = fields[i];
      process.stdout.write(gen.generate(field.min, field.max));
      if (i < fields.length - 1) {
        process.stdout.write(", ");
      }
    }
    process.stdout.write("\n");
  }

}).call(this);
