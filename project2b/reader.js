// Generated by CoffeeScript 2.4.1
(function() {
  var StateMachineReader, config, configFile, fields, fs, read, reader;

  fs = require('fs');

  configFile = 'config';

  read = function() {
    return fs.readFileSync(configFile, 'utf8');
  };

  config = read();

  console.log(config);

  fields = [];

  StateMachineReader = class StateMachineReader {
    constructor(input) {
      this.input = input;
      this.index = 0;
      this.state = "name";
      this.name = "";
      this.min = "";
      this.max = "";
    }

    next() {
      switch (this.state) {
        case "name":
          if ((this.input.charAt(this.index)) === ' ') {
            this.state = "min";
          } else {
            this.name += this.input.charAt(this.index);
          }
          this.index += 1;
          return 0;
        case "min":
          if ((this.input.charAt(this.index)) === ' ') {
            this.state = "max";
            this.min = parseFloat(this.min, 10);
          } else {
            this.min += this.input.charAt(this.index);
          }
          this.index += 1;
          return 0;
        case "max":
          if ((this.input.charAt(this.index)) === '\n') {
            this.state = "rowEnd";
            this.max = parseFloat(this.max, 10);
          } else {
            this.max += this.input.charAt(this.index);
          }
          this.index += 1;
          return 0;
        case "rowEnd":
          if (this.index === this.input.length) {
            this.state = "done";
          } else {
            this.state = "name";
            fields.push({
              name: this.name,
              min: this.min,
              max: this.max
            });
            this.name = "";
            this.min = "";
            this.max = "";
          }
          return 0;
      }
    }

  };

  reader = new StateMachineReader(config);

  while (reader.state !== "done") {
    reader.next();
  }

  console.log(fields);

}).call(this);
