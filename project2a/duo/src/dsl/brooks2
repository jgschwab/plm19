#!/usr/bin/env python3
import sys
from dsl2 import Model, Things, S, A, F, Stock, Flow, Percent, Aux, o
from pdb import set_trace


class BrooksLaw(Model):
    def __init__(self, params):
        super(BrooksLaw, self).__init__(params)
        self.params = params

    def have(i): return Things(
        aR=Flow("assimilationRate"),
        co=Percent("communicationOverhead"),
        d=Stock("developedSoftware", i.params.d),
        ep=Stock("experiencedPeople", int(i.params.ep)),
        ept=Aux("experiencedPeopleNeeded2Train"),
        nprod=Aux("nominalProductity", i.params.nprod),
        np=Stock("newPersonnel", int(i.params.np)),
        paR=Flow("personnelAllocationRate"),
        ps=Aux("plannedSoftware"),
        sdR=Flow("softwareDevelopmentRate"),
        ts=Aux("teamSize", i.params.ts),
        # one-quarter of an experienced
        to=Percent("trainingOverhead", i.params.to),
        # person's time is needed to
        # train a new person until
        # he/she is fully assimilated.
        r=Stock("requirements", i.params.r))

    def step(self, dt, t, i, j):
        def _co(x):
            "Communication overhead"
            myTeam = i.ts - 1   # talk to everyone in my team
            others = x / i.ts - 1  # talk to every other team
            return self.params.pomposity * (myTeam**2 + others**2)  # pomposity
        j.aR = i.np / self.params.learning_curve  # 20 = Learning curve
        j.ps = self.params.optimism * t  # Optimism
        j.co = _co(i.ep + i.np)
        # Don't touch 6 and zero.
        j.paR = 6 if (
            i.ps - i.d) < self.params.atleast and t < int(self.params.done_percent * t / 100) else 0
        j.sdR = i.nprod * (1 - i.co / 100) * (self.params.productivity_new
                                              * i.np + self.params.productivity_exp * (i.ep - i.ept))
        j.ept = i.np * i.to / 100
        j.ep += i.aR * dt
        j.np += (i.paR - i.aR) * dt
        j.d += i.sdR * dt
        j.r -= i.sdR * dt
        return j


if __name__ == "__main__":
    params = o()
    for i, line in enumerate(sys.stdin):
        kw = eval(line)
        for arg, val in kw.items():
            params.__dict__[arg] = float(val)
        BrooksLaw(params).run(tmax=30, print_head=i
                              == 0, verbose=kw['verbose'])
