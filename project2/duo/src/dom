#!/usr/bin/env python
import dom_server as server
import json
import sys
import random

sample_size = 100

def iteratorFactory(itType):
    if itType == "csv":
        return Iterator(',')


######## ITERATOR ########

class Iterator:
    def __init__(self, delim):
        self.delim = delim
        self.line = ""
        self.idx = 0

    def getNextLine(self):
        try:
            self.line = sys.stdin.readline()
            self.idx = 0
        except:
            self.line = ""
        
    def getNext(self):
        s = ""
        while self.line[self.idx] not in [self.delim,'\n']:
            s += self.line[self.idx]
            self.idx += 1    
        # ASSERT line[idx] is delim or '\n'
        if self.line[self.idx] != '\n':
            self.idx += 1
        return s
    
############################ 

def parse(token):
    try:
        return int(token)
    except ValueError:
        try: 
            return float(token)
        except ValueError:
            return token

it = iteratorFactory('csv')

# create header (weights)
it.getNextLine()
header = it.line[:-1] + ",>dom"
print(header)
while it.line.find(',') is -1 :
    it.getNextLine()


token = it.getNext()
weights = []

while len(token) > 0:
    if token[0] == '>':
        weights.append(1)
    elif token[0] == "<":
        weights.append(-1)
    else:
        weights.append(0)
    token = it.getNext()
    
#print(json.dumps(weights)) #debug
      
it.getNextLine()
data = []
maxes = [-999999999] * 8
mins =   [999999999] * 8

while len(it.line) > 0:
    row = [] 
    token = it.getNext()
    i = 0
    while len(token) > 0:
        t = parse(token)
        if isinstance(t, int) or isinstance(t, float):
            if maxes[i] < t:
                maxes[i] = t
            if mins[i] > t:
                mins[i] = t
        row.append(t)
        token = it.getNext()
        i += 1
    data.append(row)
    it.getNextLine()

n = min(sample_size, len(data))
for i in range(len(data)):
    sample = random.sample(data, n)
    row = data[i]
    
    req = "{\"weights\": " + json.dumps(weights) + ", \"row\": " +  json.dumps(data[i]) + ", \"sample\": " + json.dumps(sample) + ", \"mins\":" + json.dumps(mins) + ", \"maxes\":" + json.dumps(maxes) + "}"
    #print(req)
    dom_scores, response_code = server.mock_request("POST", "domScoredData", req)
    
    if response_code != 200:
        print("Error response: " + dom_scores)
    else:
        s = ","
        score = json.loads(dom_scores)
        print(s.join(str(e) for e in score))
  
